// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250310072643_FreshMigration")]
    partial class FreshMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoAuthors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("DeclaredScore")
                        .HasColumnType("real");

                    b.Property<int>("FinalAuthorHour")
                        .HasColumnType("int");

                    b.Property<bool>("IsNotMatch")
                        .HasColumnType("bit");

                    b.Property<bool>("MarkedForScoring")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("PurposeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TempAuthorHour")
                        .HasColumnType("int");

                    b.Property<int>("TempWorkHour")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorRoleId");

                    b.HasIndex("PurposeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("WorkId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Domain.Entities.AuthorRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMainAuthor")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("AuthorRoles");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34d1324e-0f93-4483-83f9-ff0498482555"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA CÔNG NGHỆ THÔNG TIN"
                        },
                        new
                        {
                            Id = new Guid("bb814b70-df6d-4584-b415-a009230eb3fa"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA ĐIỆN TỬ VIỄN THÔNG"
                        },
                        new
                        {
                            Id = new Guid("cb34108f-043b-4e9f-9568-498f514b3513"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA GIÁO DỤC"
                        },
                        new
                        {
                            Id = new Guid("8cb4057f-7108-44a6-9919-47c2d0669fb7"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA GIÁO DỤC CHÍNH TRỊ"
                        },
                        new
                        {
                            Id = new Guid("131d4f64-8e8e-489d-bdd2-36c6920c20bc"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA GIÁO DỤC MẦM NON"
                        },
                        new
                        {
                            Id = new Guid("3dec4757-43b9-41e0-92d3-13c2268e5a9f"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA GIÁO DỤC QUỐC PHÒNG - AN NINH VÀ GIÁO DỤC THỂ CHẤT"
                        },
                        new
                        {
                            Id = new Guid("63391c53-a2cf-4f06-90c6-ead72706aaa9"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA GIÁO DỤC TIỂU HỌC"
                        },
                        new
                        {
                            Id = new Guid("7c29b811-4fe7-42d4-a01c-31a48c0c55b8"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA MÔI TRƯỜNG"
                        },
                        new
                        {
                            Id = new Guid("54ad6a59-caf0-425d-9d0e-24eb62713098"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA LUẬT"
                        },
                        new
                        {
                            Id = new Guid("2f86a581-153a-4b49-ae48-997347feb634"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA NGOẠI NGỮ"
                        },
                        new
                        {
                            Id = new Guid("eb434be4-a7dc-4a13-8eb0-86ab8c01212b"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA NGHỆ THUẬT"
                        },
                        new
                        {
                            Id = new Guid("90237856-e82e-48c6-b802-edbe4d467cde"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA VĂN HÓA VÀ DU LỊCH"
                        },
                        new
                        {
                            Id = new Guid("df145d0b-3b4f-4b72-b35b-dbba6e377522"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA QUẢN TRỊ KINH DOANH"
                        },
                        new
                        {
                            Id = new Guid("94274de8-d2e8-4f3d-9c5c-6941b8c3c604"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA SƯ PHẠM KHOA HỌC TỰ NHIÊN"
                        },
                        new
                        {
                            Id = new Guid("83751766-bcee-4005-bb14-91767f26fdee"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA SƯ PHẠM KHOA HỌC XÃ HỘI"
                        },
                        new
                        {
                            Id = new Guid("3e7e47fd-1c04-4641-8beb-10b50b85e209"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA TÀI CHÍNH KẾ TOÁN"
                        },
                        new
                        {
                            Id = new Guid("b70e6f82-0460-448a-b8a4-7f816db5d0fd"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA TOÁN - ỨNG DỤNG"
                        },
                        new
                        {
                            Id = new Guid("ea5be169-45fd-4528-93dc-a53d83f5a1fb"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KHOA THƯ VIỆN VĂN PHÒNG"
                        },
                        new
                        {
                            Id = new Guid("2b86577e-5842-4021-bae7-793a1d4d920b"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PHÒNG ĐÀO TẠO"
                        },
                        new
                        {
                            Id = new Guid("d32344a0-f267-4ea8-8c24-d3caab71b8aa"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PHÒNG ĐÀO TẠO SAU ĐẠI HỌC"
                        },
                        new
                        {
                            Id = new Guid("6fc3ffbd-bc13-4d89-88d9-d0420771461d"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PHÒNG GIÁO DỤC THƯỜNG XUYÊN"
                        },
                        new
                        {
                            Id = new Guid("cd88a07d-cb87-4354-8f41-7bdc557b144e"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PHÒNG QUẢN LÝ KHOA HỌC"
                        },
                        new
                        {
                            Id = new Guid("56392386-966f-4366-9769-864a1021b53d"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PHÒNG KHẢO THÍ VÀ ĐẢM BẢO CHẤT LƯỢNG GIÁO DỤC"
                        },
                        new
                        {
                            Id = new Guid("e7ba9cbe-63ed-4efe-a50d-43640b74c92f"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PHÒNG KẾ HOẠCH - TÀI CHÍNH"
                        },
                        new
                        {
                            Id = new Guid("334d3f98-43b1-4dbb-9809-eff2c70f0441"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "VĂN PHÒNG"
                        },
                        new
                        {
                            Id = new Guid("3f39da19-a532-4759-abab-aad4bd56a3f8"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "TRẠM Y TẾ"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Factor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConvertHour")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PurposeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<Guid>("WorkLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PurposeId");

                    b.HasIndex("WorkLevelId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("Factors");
                });

            modelBuilder.Entity("Domain.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("222af233-e26e-4e98-a509-4bafa2657512"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chăn nuôi-Thú y-Thủy sản"
                        },
                        new
                        {
                            Id = new Guid("67d39e1d-7fda-4e2b-8e7a-36b945028cd1"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cơ học"
                        },
                        new
                        {
                            Id = new Guid("727f23c6-3360-4b0c-95b8-67559f95d696"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cơ khí - Động lực"
                        },
                        new
                        {
                            Id = new Guid("319bdb13-baa0-41d4-b5a0-77b863f67492"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Công nghệ Thông tin"
                        },
                        new
                        {
                            Id = new Guid("8d67fae5-ca5f-4630-b581-f93979d7f5ab"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dược học"
                        },
                        new
                        {
                            Id = new Guid("7121be55-10ff-4976-ae97-ee4cb2e098eb"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Điện - Điện tử - Tự động hóa"
                        },
                        new
                        {
                            Id = new Guid("86cc7498-2924-436a-9250-0f379de279d7"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Giao thông Vận tải"
                        },
                        new
                        {
                            Id = new Guid("683650b5-c78c-4dad-adb7-6c49e67340c5"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Giáo dục học"
                        },
                        new
                        {
                            Id = new Guid("e79de642-e149-4617-8cc0-f6b633b6f5d3"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hóa học - Công nghệ thực phẩm"
                        },
                        new
                        {
                            Id = new Guid("fcf07bae-9441-44e3-ac81-941eaa8f9762"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Khoa học An ninh"
                        },
                        new
                        {
                            Id = new Guid("84670d70-8104-4f36-ab32-cd366dfab481"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Khoa học Quân sự"
                        },
                        new
                        {
                            Id = new Guid("51fe6d6d-f5c5-4992-a7a6-5572dd22562f"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Khoa học Trái đất - Mỏ"
                        },
                        new
                        {
                            Id = new Guid("feff8dba-4647-4577-b766-fe5c9f9b68a4"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kinh tế"
                        },
                        new
                        {
                            Id = new Guid("32edf4f3-01f0-4531-a51a-4962b11e8f59"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Luật học"
                        },
                        new
                        {
                            Id = new Guid("db6184ab-8bd3-42e1-a346-a69826e877e2"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Luyện kim"
                        },
                        new
                        {
                            Id = new Guid("2a2bbf63-f769-4137-8eaf-72a8519dab42"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ngôn ngữ học"
                        },
                        new
                        {
                            Id = new Guid("8fcfef89-1f4d-45a9-9062-1f0b2a6dec2c"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nông nghiệp - Lâm nghiệp"
                        },
                        new
                        {
                            Id = new Guid("8e3a899a-7060-4280-abb7-4fbadc429fd7"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sinh học"
                        },
                        new
                        {
                            Id = new Guid("0ace7c36-6ac9-4d03-8182-132632a7ff4b"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sử học - Khảo cổ học - Dân tộc học"
                        },
                        new
                        {
                            Id = new Guid("cefed5af-0f75-4695-8f42-485caa1d9807"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tâm lý học"
                        },
                        new
                        {
                            Id = new Guid("7fcac010-dc68-4a9e-9244-4f08af9f5fc2"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Thủy lợi"
                        },
                        new
                        {
                            Id = new Guid("5fbfa45d-24e3-40b2-a1e1-12683acb3219"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Toán học"
                        },
                        new
                        {
                            Id = new Guid("549e9619-98e5-4c33-b371-d3eea6866369"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Triết học - Xã hội học - Chính trị học"
                        },
                        new
                        {
                            Id = new Guid("59321fed-e04b-45e0-ac81-a8525a01ba04"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Văn hóa - Nghệ thuật - Thể dục thể thao"
                        },
                        new
                        {
                            Id = new Guid("2b921e8a-8540-4563-946f-de098f1da684"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Văn học"
                        },
                        new
                        {
                            Id = new Guid("04bc6c47-e0f4-4176-b047-11a014d20270"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vật lý"
                        },
                        new
                        {
                            Id = new Guid("0d79b368-467e-4967-b89f-87e439ba92a6"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Xây dựng - Kiến trúc"
                        },
                        new
                        {
                            Id = new Guid("baf4bd38-28de-407f-8eb0-44e255eac3b9"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Y học"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Purpose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("Purposes");
                });

            modelBuilder.Entity("Domain.Entities.SCImagoField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("SCImagoFields");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfficerRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FieldId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinalWorkHour")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProofStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SCImagoFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScoringFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("TimePublished")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalAuthors")
                        .HasColumnType("int");

                    b.Property<int?>("TotalMainAuthors")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ScoringFieldId");

                    b.HasIndex("WorkLevelId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("Domain.Entities.WorkLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("WorkLevels");
                });

            modelBuilder.Entity("Domain.Entities.WorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("Domain.Entities.Assignment", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("Assignments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Author", b =>
                {
                    b.HasOne("Domain.Entities.AuthorRole", "AuthorRole")
                        .WithMany("Authors")
                        .HasForeignKey("AuthorRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Purpose", "Purpose")
                        .WithMany("Authors")
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Author", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Work", "Work")
                        .WithMany("Authors")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorRole");

                    b.Navigation("Purpose");

                    b.Navigation("User");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Domain.Entities.AuthorRole", b =>
                {
                    b.HasOne("Domain.Entities.WorkType", "WorkType")
                        .WithMany("AuthorRoles")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("Domain.Entities.Factor", b =>
                {
                    b.HasOne("Domain.Entities.Purpose", "Purpose")
                        .WithMany("Factors")
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkLevel", "WorkLevel")
                        .WithMany("Factors")
                        .HasForeignKey("WorkLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkType", "WorkType")
                        .WithMany("Factors")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Purpose");

                    b.Navigation("WorkLevel");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("Domain.Entities.Purpose", b =>
                {
                    b.HasOne("Domain.Entities.WorkType", "WorkType")
                        .WithMany("Purposes")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("Domain.Entities.SCImagoField", b =>
                {
                    b.HasOne("Domain.Entities.WorkType", "WorkType")
                        .WithMany("SCImagoFields")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Field", "Field")
                        .WithMany("Users")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("Domain.Entities.Work", b =>
                {
                    b.HasOne("Domain.Entities.Field", "FieldForScoring")
                        .WithMany()
                        .HasForeignKey("ScoringFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkLevel", "WorkLevel")
                        .WithMany()
                        .HasForeignKey("WorkLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FieldForScoring");

                    b.Navigation("WorkLevel");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("Domain.Entities.WorkLevel", b =>
                {
                    b.HasOne("Domain.Entities.WorkType", "WorkType")
                        .WithMany("WorkLevels")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("Domain.Entities.AuthorRole", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Field", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Purpose", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Factors");
                });

            modelBuilder.Entity("Domain.Entities.Work", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("Domain.Entities.WorkLevel", b =>
                {
                    b.Navigation("Factors");
                });

            modelBuilder.Entity("Domain.Entities.WorkType", b =>
                {
                    b.Navigation("AuthorRoles");

                    b.Navigation("Factors");

                    b.Navigation("Purposes");

                    b.Navigation("SCImagoFields");

                    b.Navigation("WorkLevels");
                });
#pragma warning restore 612, 618
        }
    }
}
